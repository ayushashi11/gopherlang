# Generated from Gopher.g4 by ANTLR 4.7.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2=")
        buf.write("\u0193\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n")
        buf.write("\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\5\r\u009f\n\r\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u00c4\n\22\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\5\36\u0102\n\36\3\37\6\37\u0105\n\37\r")
        buf.write("\37\16\37\u0106\3\37\3\37\7\37\u010b\n\37\f\37\16\37\u010e")
        buf.write("\13\37\5\37\u0110\n\37\3\37\3\37\6\37\u0114\n\37\r\37")
        buf.write("\16\37\u0115\5\37\u0118\n\37\3 \3 \3 \3 \3 \3!\3!\3!\3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3")
        buf.write("%\3%\3&\3&\3&\3\'\3\'\3\'\3(\3(\3)\3)\3*\3*\3*\3+\3+\3")
        buf.write("+\3,\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\61")
        buf.write("\3\61\5\61\u0153\n\61\3\62\3\62\3\62\3\62\3\63\3\63\3")
        buf.write("\63\3\64\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\3")
        buf.write("8\39\39\79\u0169\n9\f9\169\u016c\139\39\39\3:\3:\7:\u0172")
        buf.write("\n:\f:\16:\u0175\13:\3;\3;\7;\u0179\n;\f;\16;\u017c\13")
        buf.write(";\3;\3;\3;\3;\7;\u0182\n;\f;\16;\u0185\13;\3;\3;\5;\u0189")
        buf.write("\n;\3;\3;\3<\6<\u018e\n<\r<\16<\u018f\3<\3<\2\2=\3\3\5")
        buf.write("\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33")
        buf.write("\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32")
        buf.write("\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U")
        buf.write(",W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w=\3")
        buf.write("\2\b\3\2\62;\6\2\f\f\17\17$$))\5\2C\\aac|\6\2\62;C\\a")
        buf.write("ac|\4\2\f\f\17\17\5\2\13\f\17\17\"\"\2\u01a1\2\3\3\2\2")
        buf.write("\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2")
        buf.write("\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25")
        buf.write("\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3")
        buf.write("\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2")
        buf.write("\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2")
        buf.write("\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2")
        buf.write("9\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2")
        buf.write("\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2")
        buf.write("\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2")
        buf.write("\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3")
        buf.write("\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i")
        buf.write("\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2")
        buf.write("s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\3y\3\2\2\2\5{\3\2\2\2")
        buf.write("\7\177\3\2\2\2\t\u0081\3\2\2\2\13\u0085\3\2\2\2\r\u0087")
        buf.write("\3\2\2\2\17\u008b\3\2\2\2\21\u008d\3\2\2\2\23\u008f\3")
        buf.write("\2\2\2\25\u0091\3\2\2\2\27\u0093\3\2\2\2\31\u009e\3\2")
        buf.write("\2\2\33\u00a0\3\2\2\2\35\u00a5\3\2\2\2\37\u00aa\3\2\2")
        buf.write("\2!\u00b2\3\2\2\2#\u00c3\3\2\2\2%\u00c5\3\2\2\2\'\u00ce")
        buf.write("\3\2\2\2)\u00d2\3\2\2\2+\u00d8\3\2\2\2-\u00dd\3\2\2\2")
        buf.write("/\u00e1\3\2\2\2\61\u00e4\3\2\2\2\63\u00e9\3\2\2\2\65\u00ef")
        buf.write("\3\2\2\2\67\u00f5\3\2\2\29\u00fb\3\2\2\2;\u0101\3\2\2")
        buf.write("\2=\u0117\3\2\2\2?\u0119\3\2\2\2A\u011e\3\2\2\2C\u0124")
        buf.write("\3\2\2\2E\u0129\3\2\2\2G\u012c\3\2\2\2I\u012f\3\2\2\2")
        buf.write("K\u0133\3\2\2\2M\u0136\3\2\2\2O\u0139\3\2\2\2Q\u013b\3")
        buf.write("\2\2\2S\u013d\3\2\2\2U\u0140\3\2\2\2W\u0143\3\2\2\2Y\u0146")
        buf.write("\3\2\2\2[\u0148\3\2\2\2]\u014a\3\2\2\2_\u014c\3\2\2\2")
        buf.write("a\u0152\3\2\2\2c\u0154\3\2\2\2e\u0158\3\2\2\2g\u015b\3")
        buf.write("\2\2\2i\u015e\3\2\2\2k\u0160\3\2\2\2m\u0162\3\2\2\2o\u0164")
        buf.write("\3\2\2\2q\u0166\3\2\2\2s\u016f\3\2\2\2u\u0188\3\2\2\2")
        buf.write("w\u018d\3\2\2\2yz\7=\2\2z\4\3\2\2\2{|\7m\2\2|}\7g\2\2")
        buf.write("}~\7{\2\2~\6\3\2\2\2\177\u0080\7?\2\2\u0080\b\3\2\2\2")
        buf.write("\u0081\u0082\7&\2\2\u0082\u0083\7%\2\2\u0083\u0084\7\f")
        buf.write("\2\2\u0084\n\3\2\2\2\u0085\u0086\7\13\2\2\u0086\f\3\2")
        buf.write("\2\2\u0087\u0088\7\f\2\2\u0088\u0089\7%\2\2\u0089\u008a")
        buf.write("\7&\2\2\u008a\16\3\2\2\2\u008b\u008c\7.\2\2\u008c\20\3")
        buf.write("\2\2\2\u008d\u008e\7A\2\2\u008e\22\3\2\2\2\u008f\u0090")
        buf.write("\7]\2\2\u0090\24\3\2\2\2\u0091\u0092\7_\2\2\u0092\26\3")
        buf.write("\2\2\2\u0093\u0094\7<\2\2\u0094\30\3\2\2\2\u0095\u0096")
        buf.write("\7r\2\2\u0096\u0097\7t\2\2\u0097\u0098\7k\2\2\u0098\u0099")
        buf.write("\7p\2\2\u0099\u009f\7v\2\2\u009a\u009b\7q\2\2\u009b\u009c")
        buf.write("\7w\2\2\u009c\u009d\7v\2\2\u009d\u009f\7u\2\2\u009e\u0095")
        buf.write("\3\2\2\2\u009e\u009a\3\2\2\2\u009f\32\3\2\2\2\u00a0\u00a1")
        buf.write("\7k\2\2\u00a1\u00a2\7p\2\2\u00a2\u00a3\7e\2\2\u00a3\u00a4")
        buf.write("\7n\2\2\u00a4\34\3\2\2\2\u00a5\u00a6\7n\2\2\u00a6\u00a7")
        buf.write("\7q\2\2\u00a7\u00a8\7c\2\2\u00a8\u00a9\7f\2\2\u00a9\36")
        buf.write("\3\2\2\2\u00aa\u00ab\7g\2\2\u00ab\u00ac\7z\2\2\u00ac\u00ad")
        buf.write("\7v\2\2\u00ad\u00ae\7e\2\2\u00ae\u00af\7c\2\2\u00af\u00b0")
        buf.write("\7n\2\2\u00b0\u00b1\7n\2\2\u00b1 \3\2\2\2\u00b2\u00b3")
        buf.write("\7r\2\2\u00b3\u00b4\7t\2\2\u00b4\u00b5\7k\2\2\u00b5\u00b6")
        buf.write("\7p\2\2\u00b6\u00b7\7v\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9")
        buf.write("\7p\2\2\u00b9\"\3\2\2\2\u00ba\u00bb\7i\2\2\u00bb\u00bc")
        buf.write("\7g\2\2\u00bc\u00bd\7v\2\2\u00bd\u00c4\7u\2\2\u00be\u00bf")
        buf.write("\7k\2\2\u00bf\u00c0\7p\2\2\u00c0\u00c1\7r\2\2\u00c1\u00c2")
        buf.write("\7w\2\2\u00c2\u00c4\7v\2\2\u00c3\u00ba\3\2\2\2\u00c3\u00be")
        buf.write("\3\2\2\2\u00c4$\3\2\2\2\u00c5\u00c6\7h\2\2\u00c6\u00c7")
        buf.write("\7w\2\2\u00c7\u00c8\7p\2\2\u00c8\u00c9\7e\2\2\u00c9\u00ca")
        buf.write("\7v\2\2\u00ca\u00cb\7k\2\2\u00cb\u00cc\7q\2\2\u00cc\u00cd")
        buf.write("\7p\2\2\u00cd&\3\2\2\2\u00ce\u00cf\7t\2\2\u00cf\u00d0")
        buf.write("\7g\2\2\u00d0\u00d1\7v\2\2\u00d1(\3\2\2\2\u00d2\u00d3")
        buf.write("\7n\2\2\u00d3\u00d4\7c\2\2\u00d4\u00d5\7d\2\2\u00d5\u00d6")
        buf.write("\7g\2\2\u00d6\u00d7\7n\2\2\u00d7*\3\2\2\2\u00d8\u00d9")
        buf.write("\7i\2\2\u00d9\u00da\7q\2\2\u00da\u00db\7v\2\2\u00db\u00dc")
        buf.write("\7q\2\2\u00dc,\3\2\2\2\u00dd\u00de\7x\2\2\u00de\u00df")
        buf.write("\7c\2\2\u00df\u00e0\7t\2\2\u00e0.\3\2\2\2\u00e1\u00e2")
        buf.write("\7k\2\2\u00e2\u00e3\7h\2\2\u00e3\60\3\2\2\2\u00e4\u00e5")
        buf.write("\7g\2\2\u00e5\u00e6\7n\2\2\u00e6\u00e7\7u\2\2\u00e7\u00e8")
        buf.write("\7g\2\2\u00e8\62\3\2\2\2\u00e9\u00ea\7g\2\2\u00ea\u00eb")
        buf.write("\7n\2\2\u00eb\u00ec\7u\2\2\u00ec\u00ed\7k\2\2\u00ed\u00ee")
        buf.write("\7h\2\2\u00ee\64\3\2\2\2\u00ef\u00f0\7w\2\2\u00f0\u00f1")
        buf.write("\7p\2\2\u00f1\u00f2\7v\2\2\u00f2\u00f3\7k\2\2\u00f3\u00f4")
        buf.write("\7n\2\2\u00f4\66\3\2\2\2\u00f5\u00f6\7y\2\2\u00f6\u00f7")
        buf.write("\7j\2\2\u00f7\u00f8\7k\2\2\u00f8\u00f9\7n\2\2\u00f9\u00fa")
        buf.write("\7g\2\2\u00fa8\3\2\2\2\u00fb\u00fc\7h\2\2\u00fc\u00fd")
        buf.write("\7q\2\2\u00fd\u00fe\7t\2\2\u00fe:\3\2\2\2\u00ff\u0102")
        buf.write("\5? \2\u0100\u0102\5A!\2\u0101\u00ff\3\2\2\2\u0101\u0100")
        buf.write("\3\2\2\2\u0102<\3\2\2\2\u0103\u0105\t\2\2\2\u0104\u0103")
        buf.write("\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0104\3\2\2\2\u0106")
        buf.write("\u0107\3\2\2\2\u0107\u010f\3\2\2\2\u0108\u010c\7\60\2")
        buf.write("\2\u0109\u010b\t\2\2\2\u010a\u0109\3\2\2\2\u010b\u010e")
        buf.write("\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d")
        buf.write("\u0110\3\2\2\2\u010e\u010c\3\2\2\2\u010f\u0108\3\2\2\2")
        buf.write("\u010f\u0110\3\2\2\2\u0110\u0118\3\2\2\2\u0111\u0113\7")
        buf.write("\60\2\2\u0112\u0114\t\2\2\2\u0113\u0112\3\2\2\2\u0114")
        buf.write("\u0115\3\2\2\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2")
        buf.write("\u0116\u0118\3\2\2\2\u0117\u0104\3\2\2\2\u0117\u0111\3")
        buf.write("\2\2\2\u0118>\3\2\2\2\u0119\u011a\7v\2\2\u011a\u011b\7")
        buf.write("t\2\2\u011b\u011c\7w\2\2\u011c\u011d\7g\2\2\u011d@\3\2")
        buf.write("\2\2\u011e\u011f\7h\2\2\u011f\u0120\7c\2\2\u0120\u0121")
        buf.write("\7n\2\2\u0121\u0122\7u\2\2\u0122\u0123\7g\2\2\u0123B\3")
        buf.write("\2\2\2\u0124\u0125\7p\2\2\u0125\u0126\7w\2\2\u0126\u0127")
        buf.write("\7n\2\2\u0127\u0128\7n\2\2\u0128D\3\2\2\2\u0129\u012a")
        buf.write("\7<\2\2\u012a\u012b\7<\2\2\u012bF\3\2\2\2\u012c\u012d")
        buf.write("\7q\2\2\u012d\u012e\7t\2\2\u012eH\3\2\2\2\u012f\u0130")
        buf.write("\7c\2\2\u0130\u0131\7p\2\2\u0131\u0132\7f\2\2\u0132J\3")
        buf.write("\2\2\2\u0133\u0134\7?\2\2\u0134\u0135\7?\2\2\u0135L\3")
        buf.write("\2\2\2\u0136\u0137\7#\2\2\u0137\u0138\7?\2\2\u0138N\3")
        buf.write("\2\2\2\u0139\u013a\7@\2\2\u013aP\3\2\2\2\u013b\u013c\7")
        buf.write(">\2\2\u013cR\3\2\2\2\u013d\u013e\7@\2\2\u013e\u013f\7")
        buf.write("?\2\2\u013fT\3\2\2\2\u0140\u0141\7>\2\2\u0141\u0142\7")
        buf.write("?\2\2\u0142V\3\2\2\2\u0143\u0144\7,\2\2\u0144\u0145\7")
        buf.write(",\2\2\u0145X\3\2\2\2\u0146\u0147\7-\2\2\u0147Z\3\2\2\2")
        buf.write("\u0148\u0149\7/\2\2\u0149\\\3\2\2\2\u014a\u014b\7,\2\2")
        buf.write("\u014b^\3\2\2\2\u014c\u014d\7\61\2\2\u014d`\3\2\2\2\u014e")
        buf.write("\u0153\7\'\2\2\u014f\u0150\7t\2\2\u0150\u0151\7g\2\2\u0151")
        buf.write("\u0153\7o\2\2\u0152\u014e\3\2\2\2\u0152\u014f\3\2\2\2")
        buf.write("\u0153b\3\2\2\2\u0154\u0155\7p\2\2\u0155\u0156\7q\2\2")
        buf.write("\u0156\u0157\7v\2\2\u0157d\3\2\2\2\u0158\u0159\7/\2\2")
        buf.write("\u0159\u015a\7@\2\2\u015af\3\2\2\2\u015b\u015c\7k\2\2")
        buf.write("\u015c\u015d\7u\2\2\u015dh\3\2\2\2\u015e\u015f\7*\2\2")
        buf.write("\u015fj\3\2\2\2\u0160\u0161\7+\2\2\u0161l\3\2\2\2\u0162")
        buf.write("\u0163\7}\2\2\u0163n\3\2\2\2\u0164\u0165\7\177\2\2\u0165")
        buf.write("p\3\2\2\2\u0166\u016a\7$\2\2\u0167\u0169\n\3\2\2\u0168")
        buf.write("\u0167\3\2\2\2\u0169\u016c\3\2\2\2\u016a\u0168\3\2\2\2")
        buf.write("\u016a\u016b\3\2\2\2\u016b\u016d\3\2\2\2\u016c\u016a\3")
        buf.write("\2\2\2\u016d\u016e\7$\2\2\u016er\3\2\2\2\u016f\u0173\t")
        buf.write("\4\2\2\u0170\u0172\t\5\2\2\u0171\u0170\3\2\2\2\u0172\u0175")
        buf.write("\3\2\2\2\u0173\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174")
        buf.write("t\3\2\2\2\u0175\u0173\3\2\2\2\u0176\u017a\7%\2\2\u0177")
        buf.write("\u0179\n\6\2\2\u0178\u0177\3\2\2\2\u0179\u017c\3\2\2\2")
        buf.write("\u017a\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u0189\3")
        buf.write("\2\2\2\u017c\u017a\3\2\2\2\u017d\u017e\7%\2\2\u017e\u017f")
        buf.write("\7,\2\2\u017f\u0183\3\2\2\2\u0180\u0182\13\2\2\2\u0181")
        buf.write("\u0180\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2")
        buf.write("\u0183\u0184\3\2\2\2\u0184\u0186\3\2\2\2\u0185\u0183\3")
        buf.write("\2\2\2\u0186\u0187\7,\2\2\u0187\u0189\7%\2\2\u0188\u0176")
        buf.write("\3\2\2\2\u0188\u017d\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write("\u018b\b;\2\2\u018bv\3\2\2\2\u018c\u018e\t\7\2\2\u018d")
        buf.write("\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u018d\3\2\2\2")
        buf.write("\u018f\u0190\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0192\b")
        buf.write("<\2\2\u0192x\3\2\2\2\22\2\u009e\u00c3\u0101\u0106\u010c")
        buf.write("\u010f\u0115\u0117\u0152\u016a\u0173\u017a\u0183\u0188")
        buf.write("\u018f\3\b\2\2")
        return buf.getvalue()


class GopherLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    COL = 11
    PRINT = 12
    INCLUDE = 13
    LOAD = 14
    EXTCALL = 15
    PRINTLN = 16
    INPUT = 17
    FUNCTION = 18
    RET = 19
    LABEL = 20
    GOTO = 21
    VAR = 22
    IF = 23
    ELSE = 24
    ELSIF = 25
    UNTIL = 26
    WHILE = 27
    FOR = 28
    BOOL = 29
    DECIMAL = 30
    TRUE = 31
    FALSE = 32
    NULL = 33
    REF_OP = 34
    OR = 35
    AND = 36
    EQ = 37
    NEQ = 38
    GT = 39
    LT = 40
    GTEQ = 41
    LTEQ = 42
    POW = 43
    PLUS = 44
    MINUS = 45
    MULT = 46
    DIV = 47
    MOD = 48
    NOT = 49
    ASSIGN = 50
    CONSTASSIGN = 51
    OPAR = 52
    CPAR = 53
    OBRACE = 54
    CBRACE = 55
    STRING = 56
    ID = 57
    COMMENT = 58
    WS = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'key'", "'='", "'$#\n'", "'\t'", "'\n#$'", "','", "'?'", 
            "'['", "']'", "':'", "'incl'", "'load'", "'extcall'", "'println'", 
            "'function'", "'ret'", "'label'", "'goto'", "'var'", "'if'", 
            "'else'", "'elsif'", "'until'", "'while'", "'for'", "'true'", 
            "'false'", "'null'", "'::'", "'or'", "'and'", "'=='", "'!='", 
            "'>'", "'<'", "'>='", "'<='", "'**'", "'+'", "'-'", "'*'", "'/'", 
            "'not'", "'->'", "'is'", "'('", "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "COL", "PRINT", "INCLUDE", "LOAD", "EXTCALL", "PRINTLN", "INPUT", 
            "FUNCTION", "RET", "LABEL", "GOTO", "VAR", "IF", "ELSE", "ELSIF", 
            "UNTIL", "WHILE", "FOR", "BOOL", "DECIMAL", "TRUE", "FALSE", 
            "NULL", "REF_OP", "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", 
            "LTEQ", "POW", "PLUS", "MINUS", "MULT", "DIV", "MOD", "NOT", 
            "ASSIGN", "CONSTASSIGN", "OPAR", "CPAR", "OBRACE", "CBRACE", 
            "STRING", "ID", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "COL", "PRINT", "INCLUDE", "LOAD", 
                  "EXTCALL", "PRINTLN", "INPUT", "FUNCTION", "RET", "LABEL", 
                  "GOTO", "VAR", "IF", "ELSE", "ELSIF", "UNTIL", "WHILE", 
                  "FOR", "BOOL", "DECIMAL", "TRUE", "FALSE", "NULL", "REF_OP", 
                  "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", 
                  "POW", "PLUS", "MINUS", "MULT", "DIV", "MOD", "NOT", "ASSIGN", 
                  "CONSTASSIGN", "OPAR", "CPAR", "OBRACE", "CBRACE", "STRING", 
                  "ID", "COMMENT", "WS" ]

    grammarFileName = "Gopher.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


